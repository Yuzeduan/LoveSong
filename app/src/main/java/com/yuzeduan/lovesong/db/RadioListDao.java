package com.yuzeduan.lovesong.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuzeduan.lovesong.recommend.bean.RadioList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RADIO_LIST".
*/
public class RadioListDao extends AbstractDao<RadioList, Long> {

    public static final String TABLENAME = "RADIO_LIST";

    /**
     * Properties of entity RadioList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MChannelId = new Property(1, String.class, "mChannelId", false, "mChannelId");
        public final static Property MItemId = new Property(2, String.class, "mItemId", false, "mItemId");
        public final static Property MAlbumId = new Property(3, String.class, "mAlbumId", false, "mAlbumId");
        public final static Property MTitle = new Property(4, String.class, "mTitle", false, "mTitle");
        public final static Property MPicPath = new Property(5, String.class, "mPicPath", false, "mPicPath");
    }


    public RadioListDao(DaoConfig config) {
        super(config);
    }
    
    public RadioListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RADIO_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"mChannelId\" TEXT," + // 1: mChannelId
                "\"mItemId\" TEXT," + // 2: mItemId
                "\"mAlbumId\" TEXT," + // 3: mAlbumId
                "\"mTitle\" TEXT," + // 4: mTitle
                "\"mPicPath\" TEXT);"); // 5: mPicPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RADIO_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RadioList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mChannelId = entity.getMChannelId();
        if (mChannelId != null) {
            stmt.bindString(2, mChannelId);
        }
 
        String mItemId = entity.getMItemId();
        if (mItemId != null) {
            stmt.bindString(3, mItemId);
        }
 
        String mAlbumId = entity.getMAlbumId();
        if (mAlbumId != null) {
            stmt.bindString(4, mAlbumId);
        }
 
        String mTitle = entity.getMTitle();
        if (mTitle != null) {
            stmt.bindString(5, mTitle);
        }
 
        String mPicPath = entity.getMPicPath();
        if (mPicPath != null) {
            stmt.bindString(6, mPicPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RadioList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mChannelId = entity.getMChannelId();
        if (mChannelId != null) {
            stmt.bindString(2, mChannelId);
        }
 
        String mItemId = entity.getMItemId();
        if (mItemId != null) {
            stmt.bindString(3, mItemId);
        }
 
        String mAlbumId = entity.getMAlbumId();
        if (mAlbumId != null) {
            stmt.bindString(4, mAlbumId);
        }
 
        String mTitle = entity.getMTitle();
        if (mTitle != null) {
            stmt.bindString(5, mTitle);
        }
 
        String mPicPath = entity.getMPicPath();
        if (mPicPath != null) {
            stmt.bindString(6, mPicPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RadioList readEntity(Cursor cursor, int offset) {
        RadioList entity = new RadioList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mChannelId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mItemId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mAlbumId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mTitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // mPicPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RadioList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMChannelId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMItemId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMAlbumId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMPicPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RadioList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RadioList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RadioList entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
