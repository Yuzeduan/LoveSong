package com.yuzeduan.lovesong.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuzeduan.lovesong.music.bean.playCondition;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAY_CONDITION".
*/
public class playConditionDao extends AbstractDao<playCondition, Void> {

    public static final String TABLENAME = "PLAY_CONDITION";

    /**
     * Properties of entity playCondition.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MPosition = new Property(0, int.class, "mPosition", false, "mPosition");
        public final static Property MPlayMode = new Property(1, int.class, "mPlayMode", false, "mPlayMode");
    }


    public playConditionDao(DaoConfig config) {
        super(config);
    }
    
    public playConditionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAY_CONDITION\" (" + //
                "\"mPosition\" INTEGER NOT NULL ," + // 0: mPosition
                "\"mPlayMode\" INTEGER NOT NULL );"); // 1: mPlayMode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAY_CONDITION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, playCondition entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMPosition());
        stmt.bindLong(2, entity.getMPlayMode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, playCondition entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMPosition());
        stmt.bindLong(2, entity.getMPlayMode());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public playCondition readEntity(Cursor cursor, int offset) {
        playCondition entity = new playCondition( //
            cursor.getInt(offset + 0), // mPosition
            cursor.getInt(offset + 1) // mPlayMode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, playCondition entity, int offset) {
        entity.setMPosition(cursor.getInt(offset + 0));
        entity.setMPlayMode(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(playCondition entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(playCondition entity) {
        return null;
    }

    @Override
    public boolean hasKey(playCondition entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
